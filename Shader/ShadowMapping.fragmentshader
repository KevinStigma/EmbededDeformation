#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec4 ShadowCoord;
in float gray;
in vec3 myNormal;

// Ouput data
layout(location = 0) out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform sampler2DShadow shadowMap;
uniform float shadowClamp;
uniform vec3 myLightDir;

vec2 poissonDisk[5] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( 0, 0) 
);

// Returns a random number based on a vec3 and an int.
float random(vec3 seed, int i){
	vec4 seed4 = vec4(seed,i);
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
	return fract(sin(dot_product) * 43758.5453);
}

void main(){

	

	vec3 n = normalize(myNormal);
	vec3 l = normalize(myLightDir);
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendiular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,0.01);

	float visibility=1.0;

	float bias = 0.001*tan(acos(cosTheta));
	bias = clamp(bias, 0,0.0025);

	for (int i=0;i<5;i++){
		int index = i;
		visibility -= 0.05*(1.0-texture( shadowMap, vec3(ShadowCoord.xy + poissonDisk[index]/700.0,  (ShadowCoord.z-bias)/ShadowCoord.w) ));
	}
	
	float c = gray*visibility;
	
	if (visibility >= 0.95){
		c = 1.0;
	}
	
	if (abs(dot(n,l)) <= shadowClamp){
		c = gray*0.75;
	}
		
	c = clamp(c, 0.9,1);
		
	color = vec3(c,c,c);
	
	
}